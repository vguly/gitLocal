========================= GIT   ===============================================

Repositorio GIT = é uma pasta controlada pelo git
Release = é uma modificação definitiva
Untracked files:		Arquivo que o GIT ainda não está monitorando
Working Directory ==> representa o estado atual dos arquivos no repositório. 

Comandos:
	> git clone <url do gitlab>   	baixa os arquivos do GITLAB para a maquina
	> git tag 			lista as tags, que são marcos para os documentos
	> git checkout v0.1		sobreescreve os arquivos para a versão da tag v0.1
	> git blame <arquivo>		Para sair do blame, basta apertar a tecla q / consultar quem foi o autor de cada linha
	
	> mkdir <pasta> 		cria uma pasta
	> cd <pasta>			vai para ela 
	> git init 			controla a pasta pra mim, ou seja, fala para o git passar a mapear as alteracoes desta pasta no local
	
	> git ls-files 			Mostra quais os arquivos que estão sendo controlados
	> git status 			Mostra o estado atual do repositorio 
	
	
	> git add <arquivo> 		controla o arquivo para mim, então o arquivo passa a ser monitorado
	
	> git commit -a -m "<mensagem">	A opção -a inclui imediatamente no commit todos os arquivos modificados ou removidos! Porém, ela não adiciona os arquivos novos. Podemos combinar a opção de mensagem com git commit -a -m 'Mensagem de commit' para não precisar escrever a mensagem no editor padrão do console.
	
	> git log 			Mostra o que foi acontecendo neste projeto ao longo do tempo
	> git whatchanged  [-p]		Mostra o historico e mais os arquivos modificados
	
	> git remote add <alias repositorio> <link remoto-copiada do github>  
	> git remote add origin https://github.com/vguly/gitLocal.git   
					configura o repositorio remoto do GitHub
					add <nome>  -> "origin" é o alias padrão, pode ser qq nome
	> git push <alias repositorio que vc deu> <nome do branch>
		fica:  git push origin master
		
	> git pull origin master 	Sincronização com o repo remoto:
		Para que o desenvolvedor tenha em seu computador as novas versões dos arquivos, 
		basta que ele execute o comando git pull origin master	

Trabalhando com branches:

	> git branch 			Mostra todas as branch do projeto  (A branch que vc está trabalhando aparece com *)
	> git branch <nome da branch> 	Cria uma nova branch com o nome definido 
	
	> git checkout <nome da branch> Muda para trabalhar na branch definida 
	
	
	ATALHO! une os 3 comandos anteriores>   git checkout -t origin/designer  (cria+muda+sincroniza)
	
	
****	Mandar a branch local para o repositorio remoto:
	> git push - u <origin> <nome da branch>   		o parametro "-u" sincroniza a branch remota com a local. Ao fazer o pull vai dar certo.
		A saida do comando deve ser: "Branch <nome local> set up to track remote branch <nome branch remoto> from <nome branch principal>."
		"Branch designer set up to track remote branch designer from origin."
	
	> git branch -r			Mostra as branchs remotas 
		Para sincronizar a sua ramificação local com a remota é necessário forçar a sincronização local com o parametro "-t"
		
	> git branch -t <nome da branch local> <nome da branch remota> 
		No exemplo, fica: git branch -t designer origin/designer
		Temos como resultado:
			Branch designer set up to track remote branch designer from origin.Switched to a new branch 'designer'
		
	> git branch -D <nome da branch>  Remove uma branch somente se ela estiver sincronizada com outra.
	
	> git branch -a 	Lista todas as branches (locais e remotas) 


	> git fetch origin	te comando verifica todas as atualizações que foram realizadas no repositório de atalho "origin".

DICAS:

- Adicionar Colaboradores: A URL que permite adicionar colaboradores a um projeto é parecida com esta: https://github.com/[seu-nome-de-usuario]/curso-git/settings/collaboration

git branch -b nomeDaBranch ==> une 2 comandos: git branch nomeDaBranch + git checkout nomeDaBranch.

comandos para deletar uma branch remota:
	git push -d origin design   OU 	git push origin :design
	
RESOLUÇÃO DE CONFLITOS: 

	> GIT PULL 	- "força" uma sincronização para possibilitar um merge dos arquivos alterados (atualiza)
	e depois GIT PUSH
	
	> GIT REBASE <ramo origem> <ramo destino>   -> atualiza o destino com base na origem


PARA O TRABALHO:

1. crie uma branch local para voce
	git checkout -b desenvolveVick
2. faça a alteração 
	......xxx... 
	2.1 git add <arquivo> 
	2.2 git commit -m "alterei"
3. mude para a branch principal
	git checkout master 
4. sincronize com a ultima versao remota da master
	git pull
	
	4.1 se o pull trouxer da master alterações que não estavam no seu desenvolvimento, então tem que 
	reinserir as alterações da master primeiro (atualize sua versao de desenvolvimento da master)
		git rebase master desenvolveVick 
		(isso evita o conflito e o merge)

		4.1.1  se continuar a dar erro no rebase tente novamente
		git rebase --continue  (continua a fazer o rebase)	
		
5. traga as suas alterações da sua branch local para a branch master 
	git merge <nome da branch =desenvolveVick>
6. atualize a branch master remota.
	git push 
	
	

	
	